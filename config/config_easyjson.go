// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package config

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecodeGithubComAanufrievSoftProTestConfig(in *jlexer.Lexer, out *Provider) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "sports":
			if in.IsNull() {
				in.Skip()
				out.Sports = nil
			} else {
				in.Delim('[')
				if out.Sports == nil {
					if !in.IsDelim(']') {
						out.Sports = make([]string, 0, 4)
					} else {
						out.Sports = []string{}
					}
				} else {
					out.Sports = (out.Sports)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Sports = append(out.Sports, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "intervals":
			if in.IsNull() {
				in.Skip()
				out.Intervals = nil
			} else {
				in.Delim('[')
				if out.Intervals == nil {
					if !in.IsDelim(']') {
						out.Intervals = make([]int, 0, 8)
					} else {
						out.Intervals = []int{}
					}
				} else {
					out.Intervals = (out.Intervals)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int
					v2 = int(in.Int())
					out.Intervals = append(out.Intervals, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComAanufrievSoftProTestConfig(out *jwriter.Writer, in Provider) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"sports\":"
		out.RawString(prefix)
		if in.Sports == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Sports {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"intervals\":"
		out.RawString(prefix)
		if in.Intervals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Intervals {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Provider) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComAanufrievSoftProTestConfig(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Provider) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComAanufrievSoftProTestConfig(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Provider) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComAanufrievSoftProTestConfig(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Provider) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComAanufrievSoftProTestConfig(l, v)
}
func easyjson6615c02eDecodeGithubComAanufrievSoftProTestConfig1(in *jlexer.Lexer, out *Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "linesProvider":
			(out.LinesProvider).UnmarshalEasyJSON(in)
		case "httpPort":
			out.HTTPPort = string(in.String())
		case "grpcPort":
			out.GrpcPort = string(in.String())
		case "database":
			out.DBDataSource = string(in.String())
		case "logLevel":
			out.LogLevel = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComAanufrievSoftProTestConfig1(out *jwriter.Writer, in Config) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"linesProvider\":"
		out.RawString(prefix[1:])
		(in.LinesProvider).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"httpPort\":"
		out.RawString(prefix)
		out.String(string(in.HTTPPort))
	}
	{
		const prefix string = ",\"grpcPort\":"
		out.RawString(prefix)
		out.String(string(in.GrpcPort))
	}
	{
		const prefix string = ",\"database\":"
		out.RawString(prefix)
		out.String(string(in.DBDataSource))
	}
	{
		const prefix string = ",\"logLevel\":"
		out.RawString(prefix)
		out.String(string(in.LogLevel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComAanufrievSoftProTestConfig1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComAanufrievSoftProTestConfig1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComAanufrievSoftProTestConfig1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComAanufrievSoftProTestConfig1(l, v)
}
